from django.test import TestCase
from django.contrib.auth.models import User
from .models import Movie, Rating, FavoriteMovie, RecommendationFeedback, Genre, Keyword, CastMember, Director

class MovieModelTest(TestCase):
    def test_create_movie(self):
        # Test tworzenia obiektu Movie z podstawowymi polami i sprawdzanie ich wartości.
        movie = Movie.objects.create(title="Test Movie", release_year=2020, description="Desc", poster_url="http://example.com")
        self.assertEqual(movie.title, "Test Movie")
        self.assertEqual(movie.release_year, 2020)
        self.assertEqual(movie.description, "Desc")
        self.assertEqual(movie.poster_url, "http://example.com")
        self.assertEqual(str(movie), "Test Movie")

    def test_movie_with_relations(self):
        # Test dodawania powiązanych obiektów (genre, keyword, cast_member, director) do filmu
        # oraz sprawdzanie, czy zostały prawidłowo przypisane przez ManyToMany.
        genre = Genre.objects.create(name="Action")
        keyword = Keyword.objects.create(name="Robot")
        cast_member = CastMember.objects.create(name="Actor One")
        director = Director.objects.create(name="Director One")

        movie = Movie.objects.create(title="Complex Movie", release_year=2021)
        movie.genres.add(genre)
        movie.keywords.add(keyword)
        movie.cast.add(cast_member)
        movie.directors.add(director)

        self.assertIn(genre, movie.genres.all())
        self.assertIn(keyword, movie.keywords.all())
        self.assertIn(cast_member, movie.cast.all())
        self.assertIn(director, movie.directors.all())


class RatingModelTest(TestCase):
    def setUp(self):
        # Przygotowanie środowiska: tworzenie użytkownika i filmu, aby później dodać do nich ocenę.
        self.user = User.objects.create_user(username='testuser', password='pass')
        self.movie = Movie.objects.create(title="Rated Movie", release_year=2010)

    def test_create_rating(self):
        # Test tworzenia oceny (Rating) powiązanej z utworzonym wcześniej filmem i użytkownikiem.
        rating = Rating.objects.create(score=8, comment="Good!", movie=self.movie, user=self.user)
        self.assertEqual(rating.score, 8)
        self.assertEqual(rating.comment, "Good!")
        self.assertEqual(rating.movie, self.movie)
        self.assertEqual(rating.user, self.user)
        # Sprawdzenie, czy metoda __str__ zwraca odpowiedni string.
        self.assertEqual(str(rating), f"{self.user.username} - {self.movie.title} ({rating.score})")


class FavoriteMovieModelTest(TestCase):
    def setUp(self):
        # Przygotowanie środowiska: tworzenie użytkownika i filmu, aby dodać film do ulubionych.
        self.user = User.objects.create_user(username='favuser', password='pass')
        self.movie = Movie.objects.create(title="Favorite Movie", release_year=2005)

    def test_create_favorite_movie(self):
        # Test dodawania filmu do ulubionych (FavoriteMovie) i sprawdzenie powiązań.
        fav = FavoriteMovie.objects.create(user=self.user, movie=self.movie)
        self.assertEqual(fav.user, self.user)
        self.assertEqual(fav.movie, self.movie)
        # Sprawdzenie __str__
        self.assertEqual(str(fav), f"{self.user.username} - {self.movie.title}")


class RecommendationFeedbackModelTest(TestCase):
    def setUp(self):
        # Przygotowanie danych: tworzenie użytkownika i filmu do sprawdzenia opinii o rekomendacji.
        self.user = User.objects.create_user(username='feeduser', password='pass')
        self.movie = Movie.objects.create(title="Feedback Movie", release_year=1999)

    def test_create_recommendation_feedback(self):
        # Test tworzenia opinii (RecommendationFeedback) o rekomendacji filmowej.
        # recommendation to lista zawierająca id filmów. Sprawdzamy poprawność powiązań i __str__.
        feedback = RecommendationFeedback.objects.create(
            user=self.user,
            recommendation=[self.movie.id],
            score=9
        )
        self.assertEqual(feedback.user, self.user)
        self.assertEqual(feedback.recommendation, [self.movie.id])
        self.assertEqual(feedback.score, 9)
        user_info = self.user.username
        self.assertEqual(str(feedback), f"{user_info} - Ocena rekomendacji: {feedback.score}")



class AdditionalMovieTests(TestCase):
    def test_create_movie_without_optional_fields(self):
        # Test tworzenia filmu bez pola description i poster_url, aby sprawdzić czy null/blank są poprawnie obsługiwane.
        movie = Movie.objects.create(title="Minimal Movie", release_year=2022)
        self.assertEqual(movie.title, "Minimal Movie")
        self.assertEqual(movie.release_year, 2022)
        self.assertIsNone(movie.description)  # description jest null=True
        self.assertIsNone(movie.poster_url)   # poster_url jest null=True

    def test_empty_database_queries(self):
        # Sprawdzenie, co się stanie, gdy nie ma żadnych filmów w bazie i wykonujemy zapytanie.
        self.assertEqual(Movie.objects.count(), 0)
        # Próba pobrania filmu po tytule, gdy brak danych.
        self.assertFalse(Movie.objects.filter(title="Nonexistent").exists())


class AdditionalRatingTests(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='ratuser', password='pass')
        self.movie = Movie.objects.create(title="Rat Movie", release_year=2015)

    def test_rating_without_comment(self):
        # Komentarz jest opcjonalny, sprawdzamy czy można utworzyć ocenę bez comment.
        rating = Rating.objects.create(score=5, movie=self.movie, user=self.user)
        self.assertEqual(rating.score, 5)
        self.assertEqual(rating.comment, "")  # comment może być pusty
        self.assertEqual(rating.movie, self.movie)
        self.assertEqual(rating.user, self.user)

    def test_multiple_ratings_for_one_movie(self):
        # Dodajemy kilka ocen dla jednego filmu i sprawdzamy czy się zapisują oraz liczbę ocen.
        Rating.objects.create(score=7, movie=self.movie, user=self.user)
        Rating.objects.create(score=9, comment="Great!", movie=self.movie, user=self.user)
        self.assertEqual(Rating.objects.filter(movie=self.movie).count(), 2)


class AdditionalFavoriteMovieTests(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='multiuser', password='pass')
        self.movie1 = Movie.objects.create(title="Fav1", release_year=2000)
        self.movie2 = Movie.objects.create(title="Fav2", release_year=2001)

    def test_add_multiple_favorites(self):
        # Dodajemy kilka ulubionych filmów dla jednego użytkownika.
        FavoriteMovie.objects.create(user=self.user, movie=self.movie1)
        FavoriteMovie.objects.create(user=self.user, movie=self.movie2)
        fav_movies = FavoriteMovie.objects.filter(user=self.user)
        self.assertEqual(fav_movies.count(), 2)
        self.assertIn(self.movie1, [f.movie for f in fav_movies])
        self.assertIn(self.movie2, [f.movie for f in fav_movies])


class AdditionalRecommendationFeedbackTests(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='recuser', password='pass')
        self.movie1 = Movie.objects.create(title="Rec1", release_year=1995)
        self.movie2 = Movie.objects.create(title="Rec2", release_year=1996)

    def test_feedback_multiple_movies(self):
        # Tworzymy opinie o rekomendacji zawierającej więcej niż jeden film i sprawdzamy listę recommendation.
        feedback = RecommendationFeedback.objects.create(
            user=self.user,
            recommendation=[self.movie1.id, self.movie2.id],
            score=8
        )
        self.assertEqual(feedback.score, 8)
        self.assertCountEqual(feedback.recommendation, [self.movie1.id, self.movie2.id])


class AdditionalRelationsTests(TestCase):
    def test_add_multiple_directors_and_cast(self):
        # Test dodawania wielu reżyserów i członków obsady do jednego filmu
        movie = Movie.objects.create(title="Complex Relations Movie", release_year=2020)
        director1 = Director.objects.create(name="Director A")
        director2 = Director.objects.create(name="Director B")
        cast1 = CastMember.objects.create(name="Cast A")
        cast2 = CastMember.objects.create(name="Cast B")
        movie.directors.add(director1, director2)
        movie.cast.add(cast1, cast2)

        self.assertIn(director1, movie.directors.all())
        self.assertIn(director2, movie.directors.all())
        self.assertIn(cast1, movie.cast.all())
        self.assertIn(cast2, movie.cast.all())

    def test_add_multiple_genres_and_keywords(self):
        # Test dodawania wielu gatunków i słów kluczowych
        movie = Movie.objects.create(title="Keywords Genre Movie", release_year=2018)
        g1 = Genre.objects.create(name="Comedy")
        g2 = Genre.objects.create(name="Drama")
        k1 = Keyword.objects.create(name="Space")
        k2 = Keyword.objects.create(name="Future")

        movie.genres.add(g1, g2)
        movie.keywords.add(k1, k2)

        self.assertCountEqual(movie.genres.all(), [g1, g2])
        self.assertCountEqual(movie.keywords.all(), [k1, k2])